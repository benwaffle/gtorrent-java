package gtorrent;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import gtorrent.GtorrentLibrary.torrent_handle;
import gtorrent.GtorrentLibrary.torrent_info;
import gtorrent.GtorrentLibrary.torrent_params;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /usr/include/inttypes.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class gt_trnt extends Structure {
	/** C type : torrent_params* */
	public torrent_params tp;
	/** C type : torrent_info* */
	public torrent_info ti;
	/** C type : torrent_handle* */
	public torrent_handle th;
	/**
	 * magnet/http link (if ti is NULL)<br>
	 * C type : char*
	 */
	public Pointer url;
	/**
	 * alert callback<br>
	 * C type : call_callback*
	 */
	public gt_trnt.call_callback call;
	/**
	 * custom data to hold in gt_torrent<br>
	 * C type : void*
	 */
	public Pointer data;
	/**
	 * pointer to next item in list<br>
	 * C type : gt_torrent*
	 */
	public gt_trnt.ByReference next;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public interface call_callback extends Callback {
		/** @param gt_alertPtr1 alert callback */
		int apply(gt_alrt gt_alertPtr1);
	};
	public gt_trnt() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("tp", "ti", "th", "url", "call", "data", "next");
	}
	/**
	 * @param tp C type : torrent_params*<br>
	 * @param ti C type : torrent_info*<br>
	 * @param th C type : torrent_handle*<br>
	 * @param url magnet/http link (if ti is NULL)<br>
	 * C type : char*<br>
	 * @param call alert callback<br>
	 * C type : call_callback*<br>
	 * @param data custom data to hold in gt_torrent<br>
	 * C type : void*<br>
	 * @param next pointer to next item in list<br>
	 * C type : gt_torrent*
	 */
	public gt_trnt(torrent_params tp, torrent_info ti, torrent_handle th, Pointer url, gt_trnt.call_callback call, Pointer data, gt_trnt.ByReference next) {
		super();
		this.tp = tp;
		this.ti = ti;
		this.th = th;
		this.url = url;
		this.call = call;
		this.data = data;
		this.next = next;
	}
	public gt_trnt(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends gt_trnt implements Structure.ByReference {
		
	};
	public static class ByValue extends gt_trnt implements Structure.ByValue {
		
	};
}
