package gtorrent;
//import com.ochafik.lang.jnaerator.runtime.CharByReference;
//import com.ochafik.lang.jnaerator.runtime.globals.GlobalStruct;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.WString;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
/**
 * JNA Wrapper for library <b>gtorrent</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class GtorrentLibrary implements Library {
	public static final String JNA_LIBRARY_NAME = "gtorrent";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(GtorrentLibrary.JNA_LIBRARY_NAME);
	static {
		Native.register(GtorrentLibrary.class, GtorrentLibrary.JNA_NATIVE_LIB);
	}
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INTPTR_MAX = (long)(9223372036854775807L);
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _BSD_SOURCE = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIX64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXFAST8 = (String)"X";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuLEAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoLEAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuFAST32 = (String)"l";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT64_MAX = (long)(9223372036854775807L);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String __PRI64_PREFIX = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoMAX = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIo32 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdFAST32 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxLEAST8 = (String)"hhx";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_FORTIFY_LEVEL = (int)0;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuFAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNd64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdFAST8 = (String)"hhd";
	/** <i>native declaration : /usr/include/stdc-predef.h</i> */
	public static final int __STDC_ISO_10646__ = (int)201103;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdFAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIi64 = (String)"l";
	public static final String KRST = (String)"\033[0m";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdMAX = (String)"l";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int _STDINT_H = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _POSIX_C_SOURCE = (int)200809;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxPTR = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNu64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiMAX = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuPTR = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiLEAST8 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNu8 = (String)"hhu";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _POSIX_SOURCE = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoLEAST8 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdFAST16 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiFAST32 = (String)"l";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT_FAST32_MIN = (long)(-9223372036854775807L - 1);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoLEAST32 = (String)"o";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _SVID_SOURCE = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_SVID = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIu16 = (String)"u";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_LEAST16_MIN = (int)(-32767 - 1);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuFAST8 = (String)"hhu";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxFAST8 = (String)"hhx";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNd8 = (String)"hhd";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIx64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXFAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoFAST8 = (String)"hho";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT32_MAX = (int)(2147483647);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXPTR = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoLEAST16 = (String)"ho";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final int ____gwchar_t_defined = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuFAST32 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNd32 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiLEAST64 = (String)"l";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_LEAST8_MAX = (int)(127);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoFAST32 = (String)"l";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX199309 = (int)1;
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long UINT_LEAST32_MAX = (long)(4294967295L);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIu32 = (String)"u";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_MISC = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRId16 = (String)"d";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT_LEAST64_MIN = (long)(-9223372036854775807L - 1);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoLEAST16 = (String)"o";
	/** <i>native declaration : /usr/include/bits/wordsize.h</i> */
	public static final int __SYSCALL_WORDSIZE = (int)64;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNo8 = (String)"hho";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_FAST8_MAX = (int)(127);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int WINT_MIN = (int)(0);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdLEAST16 = (String)"d";
	/** <i>native declaration : /usr/include/bits/wordsize.h</i> */
	public static final int __WORDSIZE_TIME64_COMPAT32 = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiLEAST16 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiFAST16 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiLEAST8 = (String)"hhi";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _FEATURES_H = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNx16 = (String)"hx";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final int _INTTYPES_H = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIo64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdFAST64 = (String)"l";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long PTRDIFF_MAX = (long)(9223372036854775807L);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxLEAST8 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiLEAST32 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxFAST16 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNi32 = (String)"i";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GNU_LIBRARY__ = (int)6;
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int SIG_ATOMIC_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxFAST8 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuFAST16 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiLEAST16 = (String)"hi";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT8_MIN = (int)(-128);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_LEAST32_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ATFILE = (int)1;
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int UINT_LEAST8_MAX = (int)(255);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxMAX = (String)"l";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT16_MAX = (int)(32767);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int UINT16_MAX = (int)(65535);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INTMAX_MIN = (long)(-9223372036854775807L - 1);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxLEAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiLEAST32 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuMAX = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiPTR = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoFAST64 = (String)"l";
	/** <i>native declaration : /usr/include/bits/wordsize.h</i> */
	public static final int __WORDSIZE = (int)64;
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT_FAST16_MAX = (long)(9223372036854775807L);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxFAST32 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdPTR = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNi16 = (String)"hi";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiFAST64 = (String)"l";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_XOPEN2K8 = (int)1;
	/** <i>native declaration : /usr/include/stdc-predef.h</i> */
	public static final int __STDC_IEC_559__ = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GLIBC_MINOR__ = (int)19;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRId32 = (String)"d";
	/** <i>native declaration : /usr/include/stdc-predef.h</i> */
	public static final int __STDC_IEC_559_COMPLEX__ = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIo8 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXMAX = (String)"l";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX199506 = (int)1;
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_XOPEN2K = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxFAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIx8 = (String)"x";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int UINT8_MAX = (int)(255);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNx64 = (String)"l";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ISOC99 = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRId64 = (String)"l";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_ISOC95 = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXFAST16 = (String)"l";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT64_MIN = (long)(-9223372036854775807L - 1);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoFAST8 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxFAST32 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoPTR = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdLEAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIu64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNo32 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxPTR = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIX8 = (String)"X";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXLEAST32 = (String)"X";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_LEAST16_MAX = (int)(32767);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxLEAST16 = (String)"hx";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuLEAST8 = (String)"hhu";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INTPTR_MIN = (long)(-9223372036854775807L - 1);
	public static final int CONSOLE_MAX_TS_SIZE = (int)100;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxLEAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIi8 = (String)"i";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long UINT32_MAX = (long)(4294967295L);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdLEAST32 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoLEAST8 = (String)"hho";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuLEAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdLEAST16 = (String)"hd";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXLEAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdFAST16 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiFAST32 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIi16 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxFAST16 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiMAX = (String)"l";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_BSD = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiLEAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuPTR = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNi64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoFAST16 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNo16 = (String)"ho";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoMAX = (String)"l";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX2 = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdLEAST8 = (String)"hhd";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _DEFAULT_SOURCE = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNx32 = (String)"x";
	/**
	 * define<br>
	 * Conversion Error : 6881, 6889<br>
	 * SKIPPED:<br>
	 * <i>native declaration : line 0</i><br>
	 * 6881, 6889
	 */
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiFAST16 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdMAX = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxLEAST32 = (String)"x";
	/** <i>native declaration : /usr/include/bits/wchar.h</i> */
	public static final int _BITS_WCHAR_H = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdFAST8 = (String)"d";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT_FAST32_MAX = (long)(9223372036854775807L);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiFAST8 = (String)"hhi";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT_FAST64_MIN = (long)(-9223372036854775807L - 1);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT32_MIN = (int)(-2147483647 - 1);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdLEAST32 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuFAST8 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoPTR = (String)"l";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT_LEAST64_MAX = (long)(9223372036854775807L);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIi32 = (String)"i";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdFAST32 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIiFAST8 = (String)"i";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT_FAST64_MAX = (long)(9223372036854775807L);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_LEAST8_MIN = (int)(-128);
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long WINT_MAX = (long)(4294967295L);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNx8 = (String)"hhx";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int UINT_LEAST16_MAX = (int)(65535);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIdLEAST8 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoFAST32 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRId8 = (String)"d";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxLEAST32 = (String)"x";
	/** <i>native declaration : /usr/include/sys/cdefs.h</i> */
	public static final int _SYS_CDEFS_H = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdPTR = (String)"l";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __USE_POSIX_IMPLICITLY = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIx16 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuLEAST16 = (String)"u";
	/** <i>native declaration : /usr/include/stdc-predef.h</i> */
	public static final int _STDC_PREDEF_H = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNu32 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoFAST16 = (String)"l";
	/** <i>native declaration : /usr/include/stdc-predef.h</i> */
	public static final int __STDC_NO_THREADS__ = (int)1;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuLEAST32 = (String)"u";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int __GLIBC__ = (int)2;
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIu8 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuFAST64 = (String)"l";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long PTRDIFF_MIN = (long)(-9223372036854775807L - 1);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuMAX = (String)"l";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int UINT_FAST8_MAX = (int)(255);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuLEAST8 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuFAST16 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiPTR = (String)"l";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_FAST8_MIN = (int)(-128);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxMAX = (String)"l";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT8_MAX = (int)(127);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoLEAST32 = (String)"o";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNxFAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNd16 = (String)"hd";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIX16 = (String)"X";
	/** <i>native declaration : /usr/include/features.h</i> */
	public static final int _ATFILE_SOURCE = (int)1;
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INTMAX_MAX = (long)(9223372036854775807L);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIo16 = (String)"o";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT16_MIN = (int)(-32767 - 1);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXFAST32 = (String)"l";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int SIG_ATOMIC_MAX = (int)(2147483647);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXLEAST8 = (String)"X";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNo64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIx32 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNoLEAST64 = (String)"l";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final int INT_LEAST32_MAX = (int)(2147483647);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIxLEAST16 = (String)"x";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNi8 = (String)"hhi";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String __PRIPTR_PREFIX = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIXLEAST16 = (String)"X";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNdLEAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNuLEAST16 = (String)"hu";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIuLEAST32 = (String)"u";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNu16 = (String)"hu";
	/** <i>native declaration : /usr/include/stdint.h</i> */
	public static final long INT_FAST16_MIN = (long)(-9223372036854775807L - 1);
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIoFAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String SCNiFAST64 = (String)"l";
	/** <i>native declaration : /usr/include/inttypes.h</i> */
	public static final String PRIX32 = (String)"X";
	/** <i>native declaration : /usr/include/inttypes.h:508</i> */
	public interface gt_core_session_set_callback_f_callback extends Callback {
		int apply(gt_alrt gt_alertPtr1);
	};
	/**
	 * Compute absolute value of N.<br>
	 * Original signature : <code>intmax_t imaxabs(intmax_t)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:289</i>
	 */
	public static native NativeLong imaxabs(NativeLong __n);
	/**
	 * Return the `imaxdiv_t' representation of the value of NUMER over DENOM.<br>
	 * Original signature : <code>imaxdiv_t imaxdiv(intmax_t, intmax_t)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:292</i>
	 */
	public static native gtorrent.imaxdiv_t.ByValue imaxdiv(NativeLong __numer, NativeLong __denom);
	/**
	 * Like `strtol' but convert to `intmax_t'.<br>
	 * Original signature : <code>intmax_t strtoimax(const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:296</i><br>
	 * @deprecated use the safer methods {@link #strtoimax(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoimax(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	public static native NativeLong strtoimax(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Like `strtol' but convert to `intmax_t'.<br>
	 * Original signature : <code>intmax_t strtoimax(const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:296</i>
	 */
	public static native NativeLong strtoimax(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Like `strtoul' but convert to `uintmax_t'.<br>
	 * Original signature : <code>uintmax_t strtoumax(const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:300</i><br>
	 * @deprecated use the safer methods {@link #strtoumax(java.lang.String, com.sun.jna.ptr.PointerByReference, int)} and {@link #strtoumax(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	public static native NativeLong strtoumax(Pointer __nptr, PointerByReference __endptr, int __base);
	/**
	 * Like `strtoul' but convert to `uintmax_t'.<br>
	 * Original signature : <code>uintmax_t strtoumax(const char*, char**, int)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:300</i>
	 */
	public static native NativeLong strtoumax(String __nptr, PointerByReference __endptr, int __base);
	/**
	 * Like `wcstol' but convert to `intmax_t'.<br>
	 * Original signature : <code>intmax_t wcstoimax(const wchar_t*, wchar_t**, int)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:304</i>
	 */
	public static native NativeLong wcstoimax(WString __nptr, PointerByReference __endptr, int __base);
	/**
	 * Like `wcstoul' but convert to `uintmax_t'.<br>
	 * Original signature : <code>uintmax_t wcstoumax(const wchar_t*, wchar_t**, int)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:309</i>
	 */
	public static native NativeLong wcstoumax(WString __nptr, PointerByReference __endptr, int __base);
	/**
	 * @gt_trnt_gettime(): converts seconds to "xd xh xm xs" format<br>
	 * Original signature : <code>void gt_trnt_gettime(uint64_t, char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:446</i><br>
	 * @deprecated use the safer methods {@link #gt_trnt_gettime(long, java.nio.ByteBuffer)} and {@link #gt_trnt_gettime(long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void gt_trnt_gettime(long t, Pointer s);
	/**
	 * @gt_trnt_gettime(): converts seconds to "xd xh xm xs" format<br>
	 * Original signature : <code>void gt_trnt_gettime(uint64_t, char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:446</i>
	 */
	public static native void gt_trnt_gettime(long t, ByteBuffer s);
	/**
	 * @gt_trnt_getfsize(): converts raw file size to string format<br>
	 * Original signature : <code>void gt_trnt_getfsize(uint64_t, char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:449</i><br>
	 * @deprecated use the safer methods {@link #gt_trnt_getfsize(long, java.nio.ByteBuffer)} and {@link #gt_trnt_getfsize(long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void gt_trnt_getfsize(long fsize, Pointer s);
	/**
	 * @gt_trnt_getfsize(): converts raw file size to string format<br>
	 * Original signature : <code>void gt_trnt_getfsize(uint64_t, char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:449</i>
	 */
	public static native void gt_trnt_getfsize(long fsize, ByteBuffer s);
	/**
	 * @gt_trnt_getfsizep(): getfsize(), but with precision<br>
	 * Original signature : <code>void gt_trnt_getfsizep(uint64_t, int, char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:452</i><br>
	 * @deprecated use the safer methods {@link #gt_trnt_getfsizep(long, int, java.nio.ByteBuffer)} and {@link #gt_trnt_getfsizep(long, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void gt_trnt_getfsizep(long fsize, int p, Pointer s);
	/**
	 * @gt_trnt_getfsizep(): getfsize(), but with precision<br>
	 * Original signature : <code>void gt_trnt_getfsizep(uint64_t, int, char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:452</i>
	 */
	public static native void gt_trnt_getfsizep(long fsize, int p, ByteBuffer s);
	/**
	 * @gt_trnt_getrate(): converts raw rate in bytes/s to string format<br>
	 * Original signature : <code>void gt_trnt_getrate(uint64_t, char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:455</i><br>
	 * @deprecated use the safer methods {@link #gt_trnt_getrate(long, java.nio.ByteBuffer)} and {@link #gt_trnt_getrate(long, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void gt_trnt_getrate(long rsize, Pointer s);
	/**
	 * @gt_trnt_getrate(): converts raw rate in bytes/s to string format<br>
	 * Original signature : <code>void gt_trnt_getrate(uint64_t, char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:455</i>
	 */
	public static native void gt_trnt_getrate(long rsize, ByteBuffer s);
	/**
	 * @gt_trnt_getratep(): getrate(), but with precision<br>
	 * Original signature : <code>void gt_trnt_getratep(uint64_t, int, char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:458</i><br>
	 * @deprecated use the safer methods {@link #gt_trnt_getratep(long, int, java.nio.ByteBuffer)} and {@link #gt_trnt_getratep(long, int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void gt_trnt_getratep(long rsize, int p, Pointer s);
	/**
	 * @gt_trnt_getratep(): getrate(), but with precision<br>
	 * Original signature : <code>void gt_trnt_getratep(uint64_t, int, char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:458</i>
	 */
	public static native void gt_trnt_getratep(long rsize, int p, ByteBuffer s);
	/**
	 * @gt_trnt_getstate(): converts state value to string format<br>
	 * Original signature : <code>void gt_trnt_getstate(torrent_state, char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:461</i><br>
	 * @deprecated use the safer methods {@link #gt_trnt_getstate(int, java.nio.ByteBuffer)} and {@link #gt_trnt_getstate(int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native void gt_trnt_getstate(int state, Pointer s);
	/**
	 * @gt_trnt_getstate(): converts state value to string format<br>
	 * Original signature : <code>void gt_trnt_getstate(torrent_state, char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:461</i>
	 */
	public static native void gt_trnt_getstate(int state, ByteBuffer s);
	/**
	 * @gt_trnt_geteta(): approximates estimated time (in sec) remaining<br>
	 * Original signature : <code>uint64_t gt_trnt_geteta(uint64_t, uint64_t, uint64_t)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:464</i>
	 */
	public static native long gt_trnt_geteta(long rate, long done, long total);
	/**
	 * @gt_trnt_geteta_fmt(): format ETA (in seconds) to string<br>
	 * Original signature : <code>void gt_trnt_geteta_fmt(char*, uint64_t)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:468</i><br>
	 * @deprecated use the safer methods {@link #gt_trnt_geteta_fmt(java.nio.ByteBuffer, long)} and {@link #gt_trnt_geteta_fmt(com.sun.jna.Pointer, long)} instead
	 */
	@Deprecated 
	public static native void gt_trnt_geteta_fmt(Pointer s, long sec);
	/**
	 * @gt_trnt_geteta_fmt(): format ETA (in seconds) to string<br>
	 * Original signature : <code>void gt_trnt_geteta_fmt(char*, uint64_t)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:468</i>
	 */
	public static native void gt_trnt_geteta_fmt(ByteBuffer s, long sec);
	/**
	 * @gt_trnt_create(): create a simple gt_torrent from a file (possible magnet<br>
	 * link or local file) and a save path for the downloaded data.<br>
	 * Original signature : <code>gt_torrent* gt_trnt_create(const char*, char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:472</i><br>
	 * @deprecated use the safer methods {@link #gt_trnt_create(java.lang.String, java.nio.ByteBuffer)} and {@link #gt_trnt_create(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native gt_trnt gt_trnt_create(Pointer file, Pointer save_path);
	/**
	 * @gt_trnt_create(): create a simple gt_torrent from a file (possible magnet<br>
	 * link or local file) and a save path for the downloaded data.<br>
	 * Original signature : <code>gt_torrent* gt_trnt_create(const char*, char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:472</i>
	 */
	public static native gt_trnt gt_trnt_create(String file, ByteBuffer save_path);
	/**
	 * @gt_trnt_destroy(): delete a gt_torrent. Note that the next member is not<br>
	 * destroyed, and is only done so automatically if the torrent is on the list<br>
	 * that is freed when gt_core_session_end() is called.<br>
	 * Original signature : <code>void gt_trnt_destroy(gt_torrent*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:477</i>
	 */
	public static native void gt_trnt_destroy(gt_trnt t);
	/**
	 * @gt_core_is_maglink(): verifies whether or not a url is a magnet link<br>
	 * Original signature : <code>int gt_core_is_maglink(const char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:489</i><br>
	 * @deprecated use the safer methods {@link #gt_core_is_maglink(java.lang.String)} and {@link #gt_core_is_maglink(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native int gt_core_is_maglink(Pointer url);
	/**
	 * @gt_core_is_maglink(): verifies whether or not a url is a magnet link<br>
	 * Original signature : <code>int gt_core_is_maglink(const char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:489</i>
	 */
	public static native int gt_core_is_maglink(String url);
	/**
	 * @gt_core_get_savepath(): gets the default user save directory<br>
	 * Original signature : <code>char* gt_core_get_savepath(char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:492</i><br>
	 * @deprecated use the safer methods {@link #gt_core_get_savepath(java.nio.ByteBuffer)} and {@link #gt_core_get_savepath(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	public static native Pointer gt_core_get_savepath(Pointer str);
	/**
	 * @gt_core_get_savepath(): gets the default user save directory<br>
	 * Original signature : <code>char* gt_core_get_savepath(char*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:492</i>
	 */
	public static native Pointer gt_core_get_savepath(ByteBuffer str);
	/**
	 * @gt_core_session_get(): returns a pointer to the session<br>
	 * Original signature : <code>session* gt_core_get_session()</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:495</i>
	 */
	public static native GtorrentLibrary.session gt_core_get_session();
	/**
	 * @gt_core_session_start(): starts gtorrent session and takes care of<br>
	 * libtorrent functionality. x and y are default listening ports<br>
	 * Original signature : <code>void gt_core_session_start(int, int)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:499</i>
	 */
	public static native void gt_core_session_start(int x, int y);
	/**
	 * @gt_core_session_end(): ends gtorrent session. This must be called<br>
	 * explicitly upon program termination.<br>
	 * Original signature : <code>void gt_core_session_end()</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:503</i>
	 */
	public static native void gt_core_session_end();
	/**
	 * @gt_core_session_set_callback(): sets the callback function for whenever an<br>
	 * alert is popped that is relevant to the session only (the alert is not a <br>
	 * torrent_alert).<br>
	 * Original signature : <code>void gt_core_session_set_callback(gt_core_session_set_callback_f_callback*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:508</i>
	 */
	public static native void gt_core_session_set_callback(GtorrentLibrary.gt_core_session_set_callback_f_callback f);
	/**
	 * @gt_core_session_remove_callback(): remove callback function for session<br>
	 * Original signature : <code>void gt_core_session_remove_callback()</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:511</i>
	 */
	public static native void gt_core_session_remove_callback();
	/**
	 * @gt_core_session_add_torrent(): adds a torrent item to the session. After<br>
	 * calling this action, the torrent handle (t-th) of the simple torrent struct<br>
	 * is immediately modified. Returns 0 on failure, 1 on success.<br>
	 * Original signature : <code>int gt_core_session_add_torrent(gt_torrent*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:516</i>
	 */
	public static native int gt_core_session_add_torrent(gt_trnt t);
	/**
	 * @gt_core_session_remove_torrent(): removes a torrent from the session and<br>
	 * returns the same pointer to that torrent as was provided, or NULL on<br>
	 * error.<br>
	 * Original signature : <code>gt_torrent* gt_core_session_remove_torrent(gt_torrent*)</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:521</i>
	 */
	public static native gt_trnt gt_core_session_remove_torrent(gt_trnt t);
	/**
	 * @gt_core_session_update(): pops all alert messages from the session and<br>
	 * invokes the appropriate callback functions attached to the session and<br>
	 * individual torrent objects.<br>
	 * Original signature : <code>int gt_core_session_update()</code><br>
	 * <i>native declaration : /usr/include/inttypes.h:526</i>
	 */
	public static native int gt_core_session_update();
	//public static final GlobalStruct<gtorrent.gt_console.ByValue > Console = new GlobalStruct<gtorrent.gt_console.ByValue >(GtorrentLibrary.JNA_NATIVE_LIB, gtorrent.gt_console.ByValue.class, "Console");
	public static class torrent_params extends PointerType {
		public torrent_params(Pointer address) {
			super(address);
		}
		public torrent_params() {
			super();
		}
	};
	public static class torrent_info extends PointerType {
		public torrent_info(Pointer address) {
			super(address);
		}
		public torrent_info() {
			super();
		}
	};
	public static class alert extends PointerType {
		public alert(Pointer address) {
			super(address);
		}
		public alert() {
			super();
		}
	};
	public static class session extends PointerType {
		public session(Pointer address) {
			super(address);
		}
		public session() {
			super();
		}
		/**
		 * @gt_core_session_get(): returns a pointer to the session<br>
		 * Original signature : <code>session* gt_core_get_session()</code><br>
		 * <i>native declaration : /usr/include/inttypes.h:495</i>
		 */
		public static GtorrentLibrary.session gt_core_get() {
			return GtorrentLibrary.gt_core_get_session();
		}
	};
	public static class torrent_handle extends PointerType {
		public torrent_handle(Pointer address) {
			super(address);
		}
		public torrent_handle() {
			super();
		}
	};
}
